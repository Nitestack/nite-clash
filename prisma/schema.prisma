// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  image         String?

  accounts             Account[]
  sessions             Session[]
  clashOfClansVillages ClashOfClansVillage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

// Clash of Clans
enum Village {
  home
  builder
}

model ClashOfClansVillage {
  playerTag           String                   @id @map("id")
  player              Json
  homeVillage         Json
  builderBase         Json
  builderSeasonBoost  Int                      @default(0)
  researchSeasonBoost Int                      @default(0)
  builder             ClashOfClansBuilder[]
  laboratory          ClashOfClansLaboratory[]
  petHouse            ClashOfClansPetHouse[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ClashOfClansBuilder {
  id String @id @default(cuid())

  name         String
  buildingId   Int      @default(1)
  upgradedAt   DateTime @default(now())
  currentLevel Int
  village      Village

  clashOfClansVillage ClashOfClansVillage @relation(fields: [id], references: [playerTag])

  @@index([id])
}

model ClashOfClansLaboratory {
  id String @id @default(cuid())

  name         String
  upgradedAt   DateTime @default(now())
  currentLevel Int
  village      Village

  clashOfClansVillage ClashOfClansVillage @relation(fields: [id], references: [playerTag])

  @@index([id])
}

model ClashOfClansPetHouse {
  id String @id @default(cuid())

  name         String
  upgradedAt   DateTime @default(now())
  currentLevel Int
  village      Village  @default(home)

  clashOfClansVillage ClashOfClansVillage @relation(fields: [id], references: [playerTag])

  @@index([id])
}
